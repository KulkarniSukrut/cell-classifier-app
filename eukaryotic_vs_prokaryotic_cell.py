# -*- coding: utf-8 -*-
"""Eukaryotic VS Prokaryotic cell

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11aDQ2L2ZleArC0MzczXIgNOw15IEnZTF
"""

from google.colab import files
uploaded = files.upload()

import zipfile
import os

# Unzip Data.zip (case-sensitive)
with zipfile.ZipFile('Data.zip', 'r') as zip_ref:
    zip_ref.extractall()

import os

for dirpath, dirnames, filenames in os.walk('Data'):
    print(f'Found directory: {dirpath}')
    for filename in filenames:
        print(f'\t{filename}')

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale=1/255.0,
    validation_split=0.2,               # 20% taken for validation
    rotation_range=20,
    zoom_range=0.2,
    horizontal_flip=True
)

train_generator = train_datagen.flow_from_directory(
    'Data',
    target_size=(128, 128),
    batch_size=4,                       # Small batch for tiny dataset
    class_mode='binary',
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    'Data',
    target_size=(128, 128),
    batch_size=4,
    class_mode='binary',
    subset='validation'
)

from tensorflow.keras import layers, models

model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(128,128,3)),
    layers.MaxPooling2D(2,2),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=10
)

from google.colab import files
uploaded = files.upload()  # Upload your test image

from tensorflow.keras.preprocessing import image
import numpy as np

img = image.load_img('ok.png', target_size=(128, 128))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

prediction = model.predict(img_array)
if prediction[0][0] > 0.5:
    print("Prokaryotic Cell")
else:
    print("Eukaryotic Cell")

val_loss, val_acc = model.evaluate(val_generator)
print(f"Validation Accuracy: {val_acc * 100:.2f}%")